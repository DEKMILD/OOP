Object-Oriented Programming (OOP) คือแนวคิดในการเขียนโปรแกรมโดยจัดการปัญหาและโครงสร้างของโค้ดในรูปแบบของ "วัตถุ" (Object) โดยมีการจัดเก็บข้อมูล (Attributes) และการกระทำ (Methods) ไว้ในแต่ละวัตถุเพื่อให้ง่ายต่อการออกแบบและจัดการ
แนวคิดหลักของ OOP Object (วัตถุ)
วัตถุคือ "สิ่งของ" ที่เราจำลองในโปรแกรม เช่น รถยนต์, ผู้ใช้งาน, หรือสินค้า วัตถุมีคุณสมบัติ (Attributes) และพฤติกรรม (Methods) ของตัวเอง

ตัวอย่าง:
วัตถุ: รถยนต์
คุณสมบัติ (Attributes): สี, รุ่น, ความเร็ว
พฤติกรรม (Methods): ขับ, เบรก, เร่งความเร็ว
Class (คลาส)
คลาสคือแม่แบบ (Template) สำหรับสร้างวัตถุ เป็นเหมือนพิมพ์เขียวที่บอกว่าวัตถุนั้นควรมีอะไรบ้าง เช่น รถยนต์ทุกคันต้องมีสี, รุ่น, และความสามารถในการขับ

ตัวอย่าง:
python
คัดลอกโค้ด
class Car:
    def __init__(self, color, model):
        self.color = color
        self.model = model
    
    def drive(self):
        print("รถกำลังขับ")
Encapsulation (การห่อหุ้มข้อมูล)
การซ่อนรายละเอียดภายในวัตถุและอนุญาตให้เข้าถึงข้อมูลหรือการทำงานผ่านช่องทางที่กำหนดเท่านั้น เช่น ใช้ฟังก์ชันแทนการเข้าถึงข้อมูลโดยตรง

Inheritance (การสืบทอด)
คลาสใหม่สามารถสืบทอดคุณสมบัติและพฤติกรรมจากคลาสเดิมได้ เช่น รถยนต์สามารถสืบทอดจากยานพาหนะและเพิ่มคุณสมบัติพิเศษได้

ตัวอย่าง:

python
คัดลอกโค้ด
class Vehicle:
    def move(self):
        print("กำลังเคลื่อนที่")

class Car(Vehicle):
    def play_music(self):
        print("เปิดเพลง")

Polymorphism (การเปลี่ยนแปลงรูปแบบ)
ความสามารถในการใช้ฟังก์ชันเดียวกันในคลาสต่าง ๆ แต่ให้ผลลัพธ์ต่างกัน

ตัวอย่าง:

python
คัดลอกโค้ด
class Dog:
    def sound(self):
        print("เห่า")
class Cat:
    def sound(self):
        print("ร้องเหมียว")
Abstraction (การซ่อนรายละเอียด)
โฟกัสเฉพาะสิ่งสำคัญและซ่อนรายละเอียดซับซ้อน

เปรียบเทียบกับชีวิตจริง
Class: แบบพิมพ์เขียวของบ้าน
Object: บ้านแต่ละหลังที่สร้างตามแบบพิมพ์
Encapsulation: ซ่อนสายไฟในผนังบ้าน
Inheritance: บ้านที่มีการออกแบบต่อยอดจากแบบเดิม เช่น เพิ่มชั้นสอง
Polymorphism: บ้านที่ปรับแต่งหน้าต่างแตกต่างกันตามความต้องการ
ประโยชน์ของ OOP
โค้ดอ่านง่ายและจัดการง่ายขึ้น
ลดความซ้ำซ้อน (Reuse) ของโค้ด
โค้ดสามารถขยายเพิ่มเติมได้ง่าย
ใช้โครงสร้างแบบวัตถุที่ใกล้เคียงกับความเป็นจริง
เข้าใจง่าย ๆ คือ OOP ช่วยจัดระเบียบโค้ดของเราให้ง่ายขึ้น และเหมาะสำหรับโปรแกรมที่ซับซ้อน!
